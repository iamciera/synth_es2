BestSeq <- results[[2]][minID,]
seqChar <- paste0(csvSEG[BestSeq,4],collapse='')
seqDNA <- DNAStringSet(seqChar)
seqOut <- csvSEG[BestSeq,][,1:4]
write(seqChar, file = paste0(OutPath,'/ResultsTxt/',file,'_iter_',ITER,'_',project,'.txt'))
writeXStringSet(seqDNA,file=paste0(OutPath,'/ResultsFasta/',file,'_iter_',ITER,'_',project,'.fa'))
write.csv(seqOut,file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
#import and FIMO results and generate annotated ES2 seq
rm(list = ls())
setwd(getwd())
library(Biostrings)
source('../utilities/header.R')
project <- '/ToFIMO/Results_12.01.16/'
pFimo <- .01
pFilt <- .005 #minTol for analysis
bpUnit <- 6 #minimum "meaningful" length scale
minStretch <- 3*bpUnit #nothing shorter than this counts as an independent sequence
#most tfbs are < 10 bp
csvFIMO <- read.csv(paste0(AnalyzePath,project,'dmel_fimo.csv'),sep=',',header=TRUE)
seqDNA <- unlist(readDNAStringSet(paste0(AnalyzePath,project,'dmelES2.fa')))
dfFIMO <- as.data.frame(csvFIMO)%>%filter(pValue <= pFilt) ##this filter step is important
seqCharVec <- as.vector(strsplit(tolower(seqDNA),NULL)[[1]])
for(i in 1:nrow(dfFIMO)){
seqCharVec[dfFIMO[i,3]:dfFIMO[i,4]] <- toupper(seqCharVec[dfFIMO[i,3]:dfFIMO[i,4]])
}
seqCASE <- paste0(seqCharVec, collapse='')
segment_seq_func <- dget(paste0(FunPath,"segment_seq_func.R"))
out <-segment_seq_func(seqDNA=seqDNA,seqCASE=seqCASE
,bpUnit=bpUnit,minStretch=minStretch)
write(seqCASE, file = paste0(AnalyzePath,project,'dmel_ES2Case.txt'))
write.csv(out,file=paste0(AnalyzePath,project,'SegmentedES2_p',pFilt,'ms',minStretch,'TFBS.csv'))
file = "p0.005ms18TFBS"
<- read.csv(paste0(AnalyzePath,'/ToFIMO/',project,'/','SegmentedES2_',file,'.csv'),sep=',',header=TRUE)
results <- hungarian_shuffle_search(iter=ITER,segDF=csvSEG,bpUnit=6)
minScore <- min(results[[3]])
minID <- min(which(results[[3]]==minScore))
BestSeq <- results[[2]][minID,]
seqChar <- paste0(csvSEG[BestSeq,4],collapse='')
seqDNA <- DNAStringSet(seqChar)
seqOut <- csvSEG[BestSeq,][,1:4]
write(seqChar, file = paste0(OutPath,'/ResultsTxt/',file,'_iter_',ITER,'_',project,'.txt'))
writeXStringSet(seqDNA,file=paste0(OutPath,'/ResultsFasta/',file,'_iter_',ITER,'_',project,'.fa'))
write.csv(seqOut,file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
}
#Variational Approach to minimize edge conflicts
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(clue)
source('../utilities/header.R')
source(paste0(FunPath,'utilities.R'))
project <- 'Results_12.01.16'
hungarian_solve_gaps_func <- dget(paste0(FunPath,"hungarian_solve_gaps_func.R"))
hungarian_shuffle_search <- dget(paste0(FunPath,"hung_shuffle_search.R"))
#Define vars
bpUnit = 6
ITER = 100
csvSEG <- read.csv(paste0(AnalyzePath,'/ToFIMO/',project,'/','SegmentedES2_',file,'.csv'),sep=',',header=TRUE)
results <- hungarian_shuffle_search(iter=ITER,segDF=csvSEG,bpUnit=6)
minScore <- min(results[[3]])
minID <- min(which(results[[3]]==minScore))
BestSeq <- results[[2]][minID,]
seqChar <- paste0(csvSEG[BestSeq,4],collapse='')
seqDNA <- DNAStringSet(seqChar)
seqOut <- csvSEG[BestSeq,][,1:4]
write(seqChar, file = paste0(OutPath,'/ResultsTxt/',file,'_iter_',ITER,'_',project,'.txt'))
writeXStringSet(seqDNA,file=paste0(OutPath,'/ResultsFasta/',file,'_iter_',ITER,'_',project,'.fa'))
write.csv(seqOut,file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
csvSEG <- read.csv(paste0(AnalyzePath,'/ToFIMO/',project,'/','SegmentedES2_',file,'.csv'),sep=',',header=TRUE)
file
file="p0.005ms18TFBS"
csvSEG <- read.csv(paste0(AnalyzePath,'/ToFIMO/',project,'/','SegmentedES2_',file,'.csv'),sep=',',header=TRUE)
results <- hungarian_shuffle_search(iter=ITER,segDF=csvSEG,bpUnit=6)
minScore <- min(results[[3]])
minID <- min(which(results[[3]]==minScore))
BestSeq <- results[[2]][minID,]
seqChar <- paste0(csvSEG[BestSeq,4],collapse='')
seqDNA <- DNAStringSet(seqChar)
seqOut <- csvSEG[BestSeq,][,1:4]
write(seqChar, file = paste0(OutPath,'/ResultsTxt/',file,'_iter_',ITER,'_',project,'.txt'))
writeXStringSet(seqDNA,file=paste0(OutPath,'/ResultsFasta/',file,'_iter_',ITER,'_',project,'.fa'))
write.csv(seqOut,file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
seqResults <- read.csv(file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
mInd1 <- gregexpr('ms',file)[[1]]+2
mInd2 <- gregexpr('\\dT',file)
tInd <- gregexpr('[A-Z]{4,}',file)[[1]]
minStretch <- substr(file,mInd1,mInd2)
type <- substr(file,tInd,tInd+3)
plotArray <- vector()
index <- 1
for (i in 1:nrow(seqResults)){
seq <- cbind(seqResults[i,1]%%2,seqResults[i,1],seqResults[i,3]:seqResults[i,4]
,index:(index+seqResults[i,4]-seqResults[i,3]))
index <- index+ seqResults[i,4]-seqResults[i,3]+ 1
plotArray <- rbind(plotArray,seq)
}
ToPlot <- data.frame(rbind(plotArray[,1:4],cbind(plotArray[,1:3],plotArray[,3])))
ToPlot[,1] <- factor(ToPlot[,1])
ToPlot[,2] <- factor(as.character(ToPlot[,2]))
ToPlot <- ToPlot[ToPlot[,4]%%2==1,]
c <- ggplot(ToPlot, aes(x=X4, y=X3,color=X2, alpha = X1))
c <- c + geom_point(aes())
c <- c + labs(list(title = paste0('Original vs. Shuffled ES2:'),
subtitle= paste0('Minimum Permitted Stretch: '
,minStretch, ' Type:',type), x = "bp (from)", y = "bp (to)"))
c
ggsave(paste0(OutPath,'/plots/',project,'_',file,'.pdf'))
type
minStretch
#Let's Try to get a feel for the results
rm(list = ls())
setwd(getwd())
library(RColorBrewer)
library(Biostrings)
library(ggplot2)
library(reshape)
source('../utilities/header.R')
source(paste0(FunPath,'utilities.R'))
file = "p0.005ms18.csv"
ITER=100
project <- 'Results_12.01.16'
minStretch <- 12
type <- 'Conserved Sequences'
files = c("c0.8ms6CONS","c0.8ms18CONS","c0.8ms36CONS","p0.005ms6TFBS", "p0.005ms18TFBS", "p0.005ms24TFBS"
)
for (file in files){
seqResults <- read.csv(file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
mInd1 <- gregexpr('ms',file)[[1]]+2
mInd2 <- gregexpr('\\dT',file)
tInd <- gregexpr('[A-Z]{4,}',file)[[1]]
minStretch <- substr(file,mInd1,mInd2)
type <- substr(file,tInd,tInd+3)
plotArray <- vector()
index <- 1
for (i in 1:nrow(seqResults)){
seq <- cbind(seqResults[i,1]%%2,seqResults[i,1],seqResults[i,3]:seqResults[i,4]
,index:(index+seqResults[i,4]-seqResults[i,3]))
index <- index+ seqResults[i,4]-seqResults[i,3]+ 1
plotArray <- rbind(plotArray,seq)
}
ToPlot <- data.frame(rbind(plotArray[,1:4],cbind(plotArray[,1:3],plotArray[,3])))
ToPlot[,1] <- factor(ToPlot[,1])
ToPlot[,2] <- factor(as.character(ToPlot[,2]))
ToPlot <- ToPlot[ToPlot[,4]%%2==1,]
c <- ggplot(ToPlot, aes(x=X4, y=X3,color=X2, alpha = X1))
c <- c + geom_point(aes())
c <- c + labs(list(title = paste0('Original vs. Shuffled ES2:'),
subtitle= paste0('Minimum Permitted Stretch: '
,minStretch, ' Type:',type), x = "bp (from)", y = "bp (to)"))
c
ggsave(paste0(OutPath,'/plots/',project,'_',file,'.pdf'))
}
seqResults[1,5]
#Let's Try to get a feel for the results
rm(list = ls())
setwd(getwd())
library(RColorBrewer)
library(Biostrings)
library(ggplot2)
library(reshape)
source('../utilities/header.R')
source(paste0(FunPath,'utilities.R'))
file = "p0.005ms18.csv"
ITER=100
project <- 'Results_12.01.16'
minStretch <- 12
type <- 'Conserved Sequences'
files = c("c0.8ms6CONS","c0.8ms18CONS","c0.8ms36CONS","p0.005ms6TFBS", "p0.005ms18TFBS", "p0.005ms24TFBS"
)
for (file in files){
seqResults <- read.csv(file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
mInd1 <- gregexpr('ms',file)[[1]]+2
mInd2 <- gregexpr('\\d[A-Z]',file)
tInd <- gregexpr('[A-Z]{4,}',file)[[1]]
minStretch <- substr(file,mInd1,mInd2)
type <- substr(file,tInd,tInd+3)
plotArray <- vector()
index <- 1
for (i in 1:nrow(seqResults)){
a <- rep(0,seqResults[i,4]-seqResults[i,3]+1)
consInd <- gregexpr('[A-Z]',seqResults[i,5])[[1]]
a[consInd] <- toupper(a[consInd])
seq <- cbind(a,seqResults[i,1],seqResults[i,3]:seqResults[i,4]
,index:(index+seqResults[i,4]-seqResults[i,3]))
index <- index+ seqResults[i,4]-seqResults[i,3]+ 1
plotArray <- rbind(plotArray,seq)
}
ToPlot <- data.frame(rbind(plotArray[,1:4],cbind(plotArray[,1:3],plotArray[,3])))
ToPlot[,1] <- factor(ToPlot[,1])
ToPlot[,2] <- factor(as.character(ToPlot[,2]))
ToPlot <- ToPlot[ToPlot[,4]%%2==1,]
c <- ggplot(ToPlot, aes(x=X4, y=X3,color=X2, alpha = X1))
c <- c + geom_point(aes())
c <- c + labs(list(title = paste0('Original vs. Shuffled ES2:'),
subtitle= paste0('Minimum Permitted Stretch: '
,minStretch, ' Type:',type), x = "bp (from)", y = "bp (to)"))
c
ggsave(paste0(OutPath,'/plots/',project,'_',file,'.pdf'))
}
#Let's Try to get a feel for the results
rm(list = ls())
setwd(getwd())
library(RColorBrewer)
library(Biostrings)
library(ggplot2)
library(reshape)
source('../utilities/header.R')
source(paste0(FunPath,'utilities.R'))
file = "p0.005ms18.csv"
ITER=100
project <- 'Results_12.01.16'
minStretch <- 12
type <- 'Conserved Sequences'
files = c("c0.8ms6CONS","c0.8ms18CONS","c0.8ms36CONS","p0.005ms6TFBS", "p0.005ms18TFBS", "p0.005ms24TFBS"
)
for (file in files){
seqResults <- read.csv(file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
mInd1 <- gregexpr('ms',file)[[1]]+2
mInd2 <- gregexpr('\\d[A-Z]',file)
tInd <- gregexpr('[A-Z]{4,}',file)[[1]]
minStretch <- substr(file,mInd1,mInd2)
type <- substr(file,tInd,tInd+3)
plotArray <- vector()
index <- 1
for (i in 1:nrow(seqResults)){
a <- rep(0,seqResults[i,4]-seqResults[i,3]+1)
consInd <- gregexpr('[A-Z]',seqResults[i,5])[[1]]
a[consInd] <- toupper(a[consInd])
seq <- cbind(factor(a),seqResults[i,1],seqResults[i,3]:seqResults[i,4]
,index:(index+seqResults[i,4]-seqResults[i,3]))
index <- index+ seqResults[i,4]-seqResults[i,3]+ 1
plotArray <- rbind(plotArray,seq)
}
ToPlot <- data.frame(rbind(plotArray[,1:4],cbind(plotArray[,1:3],plotArray[,3])))
ToPlot[,2] <- factor(as.character(ToPlot[,2]))
ToPlot <- ToPlot[ToPlot[,4]%%2==1,]
c <- ggplot(ToPlot, aes(x=X4, y=X3,color=X2, alpha = X1))
c <- c + geom_point(aes())
c <- c + labs(list(title = paste0('Original vs. Shuffled ES2:'),
subtitle= paste0('Minimum Permitted Stretch: '
,minStretch, ' Type:',type), x = "bp (from)", y = "bp (to)"))
c
ggsave(paste0(OutPath,'/plots/',project,'_',file,'.pdf'))
}
ToPlot[,1]
a
a <- rep(0,seqResults[i,4]-seqResults[i,3]+1)
consInd <- gregexpr('[A-Z]',seqResults[i,5])[[1]]
a[consInd] <- toupper(a[consInd])
a[consInd] <- 1
a <- rep(0,seqResults[i,4]-seqResults[i,3]+1)
consInd <- gregexpr('[A-Z]',seqResults[i,5])[[1]]
a[consInd] <- 1
a
#Let's Try to get a feel for the results
rm(list = ls())
setwd(getwd())
library(RColorBrewer)
library(Biostrings)
library(ggplot2)
library(reshape)
source('../utilities/header.R')
source(paste0(FunPath,'utilities.R'))
file = "p0.005ms18.csv"
ITER=100
project <- 'Results_12.01.16'
minStretch <- 12
type <- 'Conserved Sequences'
files = c("c0.8ms6CONS","c0.8ms18CONS","c0.8ms36CONS","p0.005ms6TFBS", "p0.005ms18TFBS", "p0.005ms24TFBS"
)
for (file in files){
seqResults <- read.csv(file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
mInd1 <- gregexpr('ms',file)[[1]]+2
mInd2 <- gregexpr('\\d[A-Z]',file)
tInd <- gregexpr('[A-Z]{4,}',file)[[1]]
minStretch <- substr(file,mInd1,mInd2)
type <- substr(file,tInd,tInd+3)
plotArray <- vector()
index <- 1
for (i in 1:nrow(seqResults)){
a <- rep(0,seqResults[i,4]-seqResults[i,3]+1)
consInd <- gregexpr('[A-Z]',seqResults[i,5])[[1]]
a[consInd] <- 1
seq <- cbind(factor(a),seqResults[i,1],seqResults[i,3]:seqResults[i,4]
,index:(index+seqResults[i,4]-seqResults[i,3]))
index <- index+ seqResults[i,4]-seqResults[i,3]+ 1
plotArray <- rbind(plotArray,seq)
}
ToPlot <- data.frame(rbind(plotArray[,1:4],cbind(plotArray[,1:3],plotArray[,3])))
ToPlot[,2] <- factor(as.character(ToPlot[,2]))
ToPlot <- ToPlot[ToPlot[,4]%%2==1,]
c <- ggplot(ToPlot, aes(x=X4, y=X3,color=X2, alpha = X1))
c <- c + geom_point(aes())
c <- c + labs(list(title = paste0('Original vs. Shuffled ES2:'),
subtitle= paste0('Minimum Permitted Stretch: '
,minStretch, ' Type:',type), x = "bp (from)", y = "bp (to)"))
c
ggsave(paste0(OutPath,'/plots/',project,'_',file,'.pdf'))
}
#Let's Try to get a feel for the results
rm(list = ls())
setwd(getwd())
library(RColorBrewer)
library(Biostrings)
library(ggplot2)
library(reshape)
source('../utilities/header.R')
source(paste0(FunPath,'utilities.R'))
file = "p0.005ms18.csv"
ITER=100
project <- 'Results_12.01.16'
minStretch <- 12
type <- 'Conserved Sequences'
files = c("c0.8ms6CONS","c0.8ms18CONS","c0.8ms36CONS","p0.005ms6TFBS", "p0.005ms18TFBS", "p0.005ms24TFBS"
)
for (file in files){
seqResults <- read.csv(file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
mInd1 <- gregexpr('ms',file)[[1]]+2
mInd2 <- gregexpr('\\d[A-Z]',file)
tInd <- gregexpr('[A-Z]{4,}',file)[[1]]
minStretch <- substr(file,mInd1,mInd2)
type <- substr(file,tInd,tInd+3)
plotArray <- vector()
index <- 1
for (i in 1:nrow(seqResults)){
a <- rep(0,seqResults[i,4]-seqResults[i,3]+1)
consInd <- gregexpr('[A-Z]',seqResults[i,5])[[1]]
a[consInd] <- 1
seq <- cbind(factor(a),seqResults[i,1],seqResults[i,3]:seqResults[i,4]
,index:(index+seqResults[i,4]-seqResults[i,3]))
index <- index+ seqResults[i,4]-seqResults[i,3]+ 1
plotArray <- rbind(plotArray,seq)
}
ToPlot <- data.frame(rbind(plotArray[,1:4],cbind(plotArray[,1:3],plotArray[,3])))
ToPlot[,2] <- factor(as.character(ToPlot[,2]))
ToPlot <- ToPlot[ToPlot[,4]%%2==1,]
c <- ggplot(ToPlot, aes(x=X4, y=X3,color=X2, alpha = X1))
c <- c + geom_point(aes())+ theme(legend.position="none")
c <- c + labs(list(title = paste0('Original vs. Shuffled ES2:'),
subtitle= paste0('Minimum Permitted Stretch: '
,minStretch, ' Type:',type), x = "bp (from)", y = "bp (to)"))
c
ggsave(paste0(OutPath,'/plots/',project,'_',file,'.pdf'))
}
as.vector(results[[3]])
#Variational Approach to minimize edge conflicts
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(clue)
source('../utilities/header.R')
source(paste0(FunPath,'utilities.R'))
project <- 'Results_12.01.16'
hungarian_solve_gaps_func <- dget(paste0(FunPath,"hungarian_solve_gaps_func.R"))
hungarian_shuffle_search <- dget(paste0(FunPath,"hung_shuffle_search.R"))
files = c("c0.8ms6CONS")#,"c0.8ms18CONS","c0.8ms36CONS",
#"p0.005ms6TFBS", "p0.005ms18TFBS", "p0.005ms24TFBS")
#Define vars
bpUnit = 6
ITER = 10
ptm <- proc.time()
for (file in files){
csvSEG <- read.csv(paste0(AnalyzePath,'/ToFIMO/',project,'/','SegmentedES2_',file,'.csv'),sep=',',header=TRUE)
results <- hungarian_shuffle_search(iter=ITER,segDF=csvSEG,bpUnit=6)
minScore <- min(results[[3]])
minID <- min(which(results[[3]]==minScore))
BestSeq <- results[[2]][minID,]
seqChar <- paste0(csvSEG[BestSeq,4],collapse='')
seqDNA <- DNAStringSet(seqChar)
seqOut <- csvSEG[BestSeq,][,1:4]
write(seqChar, file = paste0(OutPath,'/ResultsTxt/',file,'_iter_',ITER,'_',project,'.txt'))
writeXStringSet(seqDNA,file=paste0(OutPath,'/ResultsFasta/',file,'_iter_',ITER,'_',project,'.fa'))
write.csv(seqOut,file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
write.csv(as.vector(results[[3]]),file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'scores.csv'))
}
proc.time() - ptm
30*60/1.43
#Variational Approach to minimize edge conflicts
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(clue)
source('../utilities/header.R')
source(paste0(FunPath,'utilities.R'))
project <- 'Results_12.01.16'
hungarian_solve_gaps_func <- dget(paste0(FunPath,"hungarian_solve_gaps_func.R"))
hungarian_shuffle_search <- dget(paste0(FunPath,"hung_shuffle_search.R"))
files = c("c0.8ms6CONS")#,"c0.8ms18CONS","c0.8ms36CONS",
#"p0.005ms6TFBS", "p0.005ms18TFBS", "p0.005ms24TFBS")
#Define vars
bpUnit = 6
ITER = 1200
ptm <- proc.time()
for (file in files){
csvSEG <- read.csv(paste0(AnalyzePath,'/ToFIMO/',project,'/','SegmentedES2_',file,'.csv'),sep=',',header=TRUE)
results <- hungarian_shuffle_search(iter=ITER,segDF=csvSEG,bpUnit=6)
minScore <- min(results[[3]])
minID <- min(which(results[[3]]==minScore))
BestSeq <- results[[2]][minID,]
seqChar <- paste0(csvSEG[BestSeq,4],collapse='')
seqDNA <- DNAStringSet(seqChar)
seqOut <- csvSEG[BestSeq,][,1:4]
write(seqChar, file = paste0(OutPath,'/ResultsTxt/',file,'_iter_',ITER,'_',project,'.txt'))
writeXStringSet(seqDNA,file=paste0(OutPath,'/ResultsFasta/',file,'_iter_',ITER,'_',project,'.fa'))
write.csv(seqOut,file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'.csv'))
write.csv(as.vector(results[[3]]),file=paste0(OutPath,'/ResultsCsv/',file,'_iter_',ITER,'_',project,'scores.csv'))
}
proc.time() - ptm
#Let's Try to get a feel for the results
library(RColorBrewer)
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(ggplot2)
library(reshape)
source('../utilities/header.R')
source(paste0(FunPath,'utilities.R'))
#set project folder to draw from
project <- '/ToFIMO/Results_12.01.16/'
#import dmel ES2 with p<.005 binding sites in CAPS
es2CASEChar <- as.character(unlist(read.csv(paste0(
AnalyzePath,project,'dmel_ES2Case.txt'),header=FALSE)[1]))
#import conservation scores & cons char string
RHO <- .3 #relative rate of cons substitution
conslim <- .8 #threshold for "conserved" classification
cons_scores <- read.csv(file=paste0(AnalyzePath,project,'SegmentedES2_CONS','scores.csv'))[,2:3]
es2ConsChar <- as.character(unlist(read.csv(paste0(
AnalyzePath,project,'dmel_es2CASECons_rho',RHO,'cl',consLim,'.txt'),header=FALSE)[1]))
#plot tfbs footprint vs. cons_score
tfbsVec <- rep(0,nchar(es2CASEChar))
tfbsInd <- as.vector(unlist(gregexpr('[A,T,G,C]',es2CASEChar)))
tfbsVec[tfbsInd] <- 1
ConsTfbsToPlot <- cbind(cons_scores,tfbsVec)
ConsTfbsToPlot <- melt(ConsTfbsToPlot,id='coord')
a <- ggplot(cons_scores,aes(coord,post.prob))+geom_area(color='dodgerblue3',fill='dodgerblue3',alpha=.5)
a <- ggplot(data=ConsTfbsToPlot)
a <- a + geom_line(aes(x=coord, y=value, color = variable))
a <- a + geom_ribbon(aes(ymin=0, ymax=value, x=coord,  fill = variable), alpha = 0.3)
a <- a + ggtitle('Conservation Scores and Predicted TFBS by x Position')
a
#load sequences and obtain conservation scores
rm(list = ls())
setwd(getwd())
source('../utilities/header.R')
library(rphast)
library(Biostrings)
library(DECIPHER)
library(ape)
library(ggplot2)
project <- '/ToFIMO/Results_12.01.16/'
#####Read in ES2 Sequences Compiled by Ciera####
CombES2 <- readDNAStringSet(paste0(SeqPath,'forContructTarget_eve-striped-2_with_Montium_and_melanogaster.fa'))
RefTree <- as.character(unlist(read.table(paste0(AnalyzePath,'RefTree.txt'))))
csvFIMO <- read.csv(paste0(AnalyzePath,project,'dmel_fimo.csv'),sep=',',header=TRUE)
es2CASEChar <- as.character(unlist(read.csv(paste0(
AnalyzePath,project,'dmel_ES2Case.txt'),header=FALSE)[1]))
#Plot RefTree for visual Check
RefTreePlot <- read.tree(text = RefTree)
plot(RefTreePlot, type = "phylogram")
names <- unlist(strsplit(names(CombES2),'\\|'))
ind  <- seq(3,length(names),4)
ClnNames <- names[ind] #Note: MEMB002E does not appear in phylo data. remove
ClnNames <- c(ClnNames[1:8],ClnNames[10:18])
CombES2 <- c(CombES2[1:8],CombES2[10:18])
#NOTE: dmel should be on top to ensure compatible coordinates for cons scores
ClnNames <- c(ClnNames[17],ClnNames[1:16])
CombES2 <- c(CombES2[17],CombES2[1:16])
ClnNames[1]
CombES2[1]
ES2Aligned <- AlignSeqs(CombES2)
msaES2 <- msa(paste(ES2Aligned),names=ClnNames)
#####estimate treeeee#####
neutralMod <- phyloFit(msaES2,tree=RefTree)
#Let's take a look at the fitted tree
FitTree <- "(((MEMB003D:0.041213,(MEMB003F:0.0657486,(MEMB002D:0.0487667,MEMB003B:0.116597):0.0109954):0.013095):0.0565007,(MEMB002F:0.103063,(MEMB002A:0.00887196,(MEMB002C:0.00573016,MEMB003C:0.006826):0.00556543):0.121106):0.00923898):0.0553344,((DroWil1:0.355821,(DroMoj3:0.175613,DroVir3:0.13643):0.317412):0.0964739,(Dp4:0.295486,(DroAna3:0.21584,(DroEre2:0.0592241,(dmel:0.0187653,DroSim1:0.013545):0.035115):0.163677):0.0371299):0.0152591):0.0553344);"
FitTreePlot <- read.tree(text = FitTree)
plot(FitTreePlot, type = "phylogram")
#estimate expected.length by taking average len of CAPS in CASE. This will give a
#higher avg length than FP coordinates because many sites overlap
splitMat <- unlist(strsplit(gsub('[a,t,g,c]','-',es2CASEChar),'-'))
splitMat <- splitMat[splitMat != ""]
Tlen <- nchar(paste0(splitMat,collapse=''))/length(splitMat)
#estimate expecte.coverage by finding %dmel es2 that has TFBS footprint
#this is very sensitive to my choice of P Value....
coverage <- nchar(gsub('[a,t,g,c]','',es2CASEChar))/nchar(es2CASEChar)
#above value agrees well with coverage of footprinted
#sites for minimal es2 (~.47)
RHO <- .3 #I'm not sure about this value (relative evo rate). Check sensitivity
#results are quite robust to changes: .5--.32 cons,.3--.302,.1--.26
phast <- phastCons(msaES2, neutralMod,rho=RHO, target.coverage=coverage, expected.length=Tlen)
cons_scores <- phast$post.prob.wig
plot(cons_scores) #wow. Nice distinction
hist(cons_scores$post.prob) #Will set threshold at .8
consLim <- .8
cons_scoresFilt <- filter(cons_scores, post.prob >= consLim)
consInd <- cons_scoresFilt[,1]
es2Lower <- tolower(es2CASEChar)
es2split <- unlist(strsplit(es2Lower,NULL))
es2CASECons <- es2split
es2CASECons[consInd] <- toupper(es2CASECons[consInd])
es2CASECons <- paste0(es2CASECons,collapse='')
#####CALL SEGEMENTATION FUNC#####
segment_seq_func <- dget(paste0(FunPath,"segment_seq_func.R"))
dmeles2 <- unlist(CombES2[1])
bpUnit <- 6
minStretch <- 6*bpUnit #not very sensitive to param val
out <-segment_seq_func(seqDNA=dmeles2,seqCASE=es2CASECons
,bpUnit=bpUnit,minStretch=minStretch)
write.csv(out,file=paste0(AnalyzePath,project,'SegmentedES2_c',consLim,'ms',minStretch,'CONS.csv'))
write.csv(cons_scores,file=paste0(AnalyzePath,project,'SegmentedES2_CONS','scores.csv'))
write(es2CASECons, file = paste0(AnalyzePath,project,'dmel_es2CASECons_rho',RHO,'cl',consLim,'.txt'))
writeXStringSet(ES2Aligned,file=paste0(OutPath,'all_seq_algn.fa'))
