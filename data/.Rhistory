for (i in (k-1):1){
for (j in 1:(n-k)){
h <-  merge(v[j,1:i],(v[v[,(i+1)] > v[j,i],(i+1):k]), by = NULL)
if (j == 1){
g <- h
}
else {
g <- rbind(g,h)
}
}
v <- g
}
View(template)
template[j,1:i]
h <-  merge(v[j,1:i],(v[v[,(i+1)] > v[j,i],(i+1):k]), by = NULL)
v <- template
i <- 3
j <- 1
merge(v[j,1:i],(v[v[,(i+1)] > v[j,i],(i+1):k]), by = NULL)
v[j,1:i]
(v[v[,(i+1)] > v[j,i],(i+1):k])
h <-  merge(as.data.frame(v[j,1:i]),as.data.frame(v[v[,(i+1)] > v[j,i],(i+1):k]), by = NULL)
as.data.frame(v[j,1:i])
as.data.frame(t(v[j,1:i]))
h <-  merge(as.data.frame(t(v[j,1:i])),as.data.frame(v[v[,(i+1)] > v[j,i],(i+1):k]), by = NULL)
as.data.frame(v[v[,(i+1)] > v[j,i],(i+1):k])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
##General Algorithmic Solution to Birthday Problem
rm(list = ls())
n <- 9
k <- 4
template <- matrix(nrow=(n-k), ncol = k)
for (i in 1:k){
for (j in 1:(n-k)){
template[j,i] <- i + j - 1
}
}
base <- template
for (i in (k-1):1){
for (j in 1:length(base[,1])) {
if (j != length(base[,1])){
h <- merge(t(base[j,1:i]),as.data.frame(base[j:length(base[,1]),(i+1):k]),by = NULL)
}
else{
h <- cbind(t(base[j,1:i]),t(base[j:length(base[,1]),(i+1):k]))
}
if (j == 1){
g <- h
}
else{
g <- rbind(as.matrix(g),as.matrix(h))
}
}
base <- g
}
##interpret
cells <- n+1
output <- 0*cbind(base,base[,1])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
calc <- matrix[ncol = 2, nrow = length(output[,1]))
calc <- matrix[ncol = 2, nrow = length(output[,1])
calc <- matrix(ncol = 2, nrow = length(output[,1])
calc <- matrix(ncol = 2, nrow = length(output[,1])
)
for (i in 1:length(output[,1])){
c <- n
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
m <- (factorial(c)/(factorial(output[i,j])factorial(c-output[i,j])))*m
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
for (i in 1:length(output[,1])){
c <- n
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
warnings()
c <- n
View(output)
for (i in 1:length(output[,1])){
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
View(calc)
sum(calc[,2])
5^10
4^10
sum(calc[,2])/4^10
View(base)
View(output)
View(calc)
View(output)
10*9*8*6
10*9*8*7*6
sum(calc[,2])/5^10
i <- 1
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
c <- n + 1
m <- 1
for (j in 1:1){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
c <- n + 1
m <- 1
for (j in 1:2){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
c <- n + 1
m <- 1
for (j in 1:4){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
c <- n + 1
m <- 1
for (j in 1:5){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
c <- n + 1
m <- 1
for (j in 1:4){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
factorial(c)
factorial(c-output[i,j])
output[i,j]
View(output)
j <- 5
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
View(h)
View(output)
check <- vector()
check <- vector()
for (i in 1:length(output[,1])){
check[i] <- output[i,1] + output[i,2]*10 + output[i,3]*10^2 + output[i,4]*10^3 + output[i,5]*10^4
}
check <- order[check]
check <- order[check[i:7260]]
library(dplyr)
check <- arrange(check,V1)
check <- as.data.frame(check)
check <- arrange(check,V1)
View(check)
check <- arrange(check,check)
View(check)
##General Algorithmic Solution to Birthday Problem
rm(list = ls())
n <- 3
k <- 2
template <- matrix(nrow=(n-k), ncol = k)
for (i in 1:k){
for (j in 1:(n-k)){
template[j,i] <- i + j - 1
}
}
View(template)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
n <- 3
k <- 2
template <- matrix(nrow=(n-k), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
template <- matrix(nrow=(n-k+1), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
base <- template
for (i in (k-1):1){
for (j in 1:length(base[,1])) {
if (j != length(base[,1])){
h <- merge(t(base[j,1:i]),as.data.frame(base[j:length(base[,1]),(i+1):k]),by = NULL)
}
else{
h <- cbind(t(base[j,1:i]),t(base[j:length(base[,1]),(i+1):k]))
}
if (j == 1){
g <- h
}
else{
g <- rbind(as.matrix(g),as.matrix(h))
}
}
base <- g
}
View(base)
cells <- n+1
output <- 0*cbind(base,base[,1])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
View(output)
calc <- matrix(ncol = 2, nrow = length(output[,1]))
for (i in 1:length(output[,1])){
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
View(calc)
View(output)
View(calc)
View(h)
View(output)
##General Algorithmic Solution to Birthday Problem
rm(list = ls())
n <- 5
k <- 2
template <- matrix(nrow=(n-k+1), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
base <- template
for (i in (k-1):1){
for (j in 1:length(base[,1])) {
if (j != length(base[,1])){
h <- merge(t(base[j,1:i]),as.data.frame(base[j:length(base[,1]),(i+1):k]),by = NULL)
}
else{
h <- cbind(t(base[j,1:i]),t(base[j:length(base[,1]),(i+1):k]))
}
if (j == 1){
g <- h
}
else{
g <- rbind(as.matrix(g),as.matrix(h))
}
}
base <- g
}
##interpret--convert to list of macrostates
cells <- n+1
output <- 0*cbind(base,base[,1])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
##weight by # microstates
calc <- matrix(ncol = 2, nrow = length(output[,1]))
for (i in 1:length(output[,1])){
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
sum(calc[,2])
3^6
rm(list = ls())
n <- 10
k <- 4
template <- matrix(nrow=(n-k+1), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
base <- template
for (i in (k-1):1){
for (j in 1:length(base[,1])) {
if (j != length(base[,1])){
h <- merge(t(base[j,1:i]),as.data.frame(base[j:length(base[,1]),(i+1):k]),by = NULL)
}
else{
h <- cbind(t(base[j,1:i]),t(base[j:length(base[,1]),(i+1):k]))
}
if (j == 1){
g <- h
}
else{
g <- rbind(as.matrix(g),as.matrix(h))
}
}
base <- g
}
##interpret--convert to list of macrostates
cells <- n+1
output <- 0*cbind(base,base[,1])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
##weight by # microstates
calc <- matrix(ncol = 2, nrow = length(output[,1]))
for (i in 1:length(output[,1])){
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
sum(calc[,2])
5^11
(factorial(22)/(factorial(2)(factorial(20))))*(1/365)
(factorial(22)/(factorial(2)*(factorial(20))))*(1/365)
(factorial(21)/(factorial(2)*(factorial(20))))*(1/365)
(factorial(23)/(factorial(2)*(factorial(20))))*(1/365)
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 22
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 23
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 27
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 45
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
(factorial(n)/(factorial(2)*(factorial(n-2))))
45*44/2
(factorial(n)/(factorial(2)*(factorial(n-2))))*(2/365)^2
a <- 1:5
median(a)
a <- 1:6
median(a)
median(1:6)
rep(0,4)
#given a matrix of PWMs, calculate normalized joint score
rm(list = ls())
library(dplyr)
library(Biostrings)
library(ggplot2)
#library(reshape)
setwd('C:/Users/Nicholas/Documents/GitHub/synth_es2/data/')
InPath <- 'intermediate/'
WritePath <- './out/'
FunPath <- 'C:/Users/Nicholas/Documents/GitHub/synth_es2/analysis/functions/'
#####Read in PWM Matrix#####
MasterPWM <- read.table(file = paste0(InPath,'MasterPWM.csv'), header = TRUE, sep = ',')
TFsumm <- as.data.frame(group_by(MasterPWM,TF,ID)%>%
summarize())
TFnames <- unique(TFsumm[,1])
#####Read in ES2 Matrix######
es2csv <- read.csv('./in/redfly/ES2MinSeq.csv', header = TRUE, sep = ",")
TFranges <- read.csv('./intermediate/TFranges.csv', header = TRUE, sep = ",")[,2:3]
#create es2 seq char
es2Char <- as.character(es2csv[1,6])
#call tfbs annotation function
es2AnnoChar <- gsub('F','-',annotate_tfbs_fun(seq=es2Char,tfbs=TFranges))
es2Anno <- DNAString(es2AnnoChar)
es2 <- DNAString(es2Char)
annotate_tfbs_fun <- dget(paste0(FunPath,"annotate_tfbs_fun.R"))
es2AnnoChar <- gsub('F','-',annotate_tfbs_fun(seq=es2Char,tfbs=TFranges))
es2Anno <- DNAString(es2AnnoChar)
SEQ = es2
DRIVER = TFsumm
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[i,1])
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
med(1:8)
median(1:8)
med = 4.5
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=DRIVER[1,2],tf=DRIVER[1,1])
test <- mapply(iter, DRIVER[,2],DRIVER[,1])
iter <- function(ID,TF){
scores <- pwmScore_fun(pwmMat=MasterPWM,seq=SEQ,id=ID,tf=TF)
}
test <- mapply(iter, DRIVER[,2],DRIVER[,1])
View(test)
View(test)
mapply(pwmScore_fun, id = DRIVER[,2], tf = DRIVER[,1], MoreArgs = list(pwmMat = MasterPWM, seq=SEQ))
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
sub_seq_fun <- dget(paste0(FunPath,"sub_seq_fun.R"))
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
scores = mapply(pwmScore_fun, id = DRIVER[,2], tf = DRIVER[,1],
MoreArgs = list(pwmMat = MasterPWM, seq=SEQ, wt = 0))
warnings()
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
scores = mapply(pwmScore_fun, id = DRIVER[,2], tf = DRIVER[,1],
MoreArgs = list(pwmMat = MasterPWM, seq=SEQ, WT = 0))
pwmScoreDriver_fun <- dget(paste0(FunPath,"pwmScoreDriver_fun.R"))
pwmScore_fun <- dget(paste0(FunPath,"pwmScore_fun.R")) #called inside pwmScoreDriver_fun
pwmScoreDriver_fun <- dget(paste0(FunPath,"pwmScoreDriver_fun.R"))
#Calculate weight and es2 ref matrices that will remain constant throughout iteration
wtsPMW <- pwmScoreDriver_fun(MAT=MAsterPWM,SEQ=es2,DRIVER=TFsumm,WEIGHT=1)
es2Scores <- pwmScoreDriver_fun(MAT=MAsterPWM,SEQ=es2,DRIVER=TFsumm,WEIGHT=0)
pwmScoreDriver_fun <- dget(paste0(FunPath,"pwmScoreDriver_fun.R"))
wtsPMW <- pwmScoreDriver_fun(MAT=MAsterPWM,SEQ=es2,DRIVER=TFsumm,WEIGHT=1)
es2Scores <- pwmScoreDriver_fun(MAT=MAsterPWM,SEQ=es2,DRIVER=TFsumm,WEIGHT=0)
pwmScoreDriver_fun <- dget(paste0(FunPath,"pwmScoreDriver_fun.R"))
#Calculate weight and es2 ref matrices that will remain constant throughout iteration
wtsPMW <- pwmScoreDriver_fun(MAT=MAsterPWM,SEQ=es2,DRIVER=TFsumm,WEIGHT=1)
es2Scores <- pwmScoreDriver_fun(MAT=MAsterPWM,SEQ=es2,DRIVER=TFsumm,WEIGHT=0)
View(wtsPMW)
